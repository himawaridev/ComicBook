const express = require('express');
const app = express();
const cors = require('cors');
const { sequelize } = require('./Model');
const http = require('http');
const socketManager = require('./socket/socketManager');

// Import Services:
const { initServices } = require('./Check');
const { autoUpdateData } = require('./LoadData'); // Import h√†m t·ª± ƒë·ªông c·∫≠p nh·∫≠t d·ªØ li·ªáu

// Loading environment variables from file .env:
const dotenv = require('dotenv');
dotenv.config();
console.log("DB USER server:", process.env.PORT_SERVER_RUN); // Ki·ªÉm tra xem bi·∫øn c√≥ ƒë∆∞·ª£c ƒë·ªçc kh√¥ng

// Import router from Router:
const TruyenTienHiepRouter = require('./Router/TruyenTienHiepRouter');
const TheLoaiTruyenRouter = require('./Router/TheLoaiTruyenRouter');
const TruyenKiemHiepRouter = require('./Router/TruyenKiemHiepRouter');
const TruyenMoiCapNhatRouter = require('./Router/TruyenMoiCapNhatRouter');
const TruyenHotRouter = require('./Router/TruyenHotRouter');
const TruyenHoanHotRouter = require('./Router/TruyenHoanHotRouter')

// ------------------------ Use app ------------------------ //
app.use(cors());
app.use(express.json());

// ------------------------ Use router ------------------------ //
app.use('/', TruyenTienHiepRouter);
app.use('/', TheLoaiTruyenRouter);
app.use('/', TruyenKiemHiepRouter);
app.use('/', TruyenMoiCapNhatRouter);
app.use('/', TruyenHotRouter);
app.use('/', TruyenHoanHotRouter);

// ------------------------ Kh·ªüi ƒë·ªông Server ------------------------ //
const startServer = async () => {
    try {
        try {
            await sequelize.authenticate();
            console.log("[‚úÖ Database connected successfully]");
        } catch (error) {
            console.error("[‚ùå Database connection failed]", error.message);
            process.exit(1); // D·ª´ng server n·∫øu k·∫øt n·ªëi th·∫•t b·∫°i
        }

        try {
            await sequelize.sync(); // ƒê·ªìng b·ªô c∆° s·ªü d·ªØ li·ªáu
            console.log("[‚úÖ Database synced successfully]");
            console.log("[üîÑ Initializing services...]");
        } catch (error) {
            console.error("[‚ùå Database sync failed:", error.message);
            process.exit(1); // D·ª´ng server n·∫øu ƒë·ªìng b·ªô th·∫•t b·∫°i
        }

        console.log('-----------------------------------------------------------------------');

        // ----- Run servies:
        try {
            await initServices(); // G·ªçi kh·ªüi t·∫°o services ·ªü file check.js
            console.log("[‚úÖ Services] initialized successfully: Check.js");
        }
        catch (error) {
            console.error("[‚ùå Services] initialization failed:", error.message);
            process.exit(1); // D·ª´ng server n·∫øu kh·ªüi t·∫°o services th·∫•t b·∫°i
        }

        try {
            await autoUpdateData(); // G·ªçi kh·ªüi t·∫°o services ·ªü file LoadData.js
            console.log("[‚úÖ AutoUpdate] initialized successfully: LoadData.js");
        }
        catch (error) {
            console.error("[‚ùå AutoUpdate initialization failed:", error.message);
            process.exit(1); // D·ª´ng server n·∫øu kh·ªüi t·∫°o services th·∫•t b·∫°i
        }

        //------------------------------ Start server ------------------------------//
        const PORT = process.env.PORT_SERVER_RUN || 8000;
        const server = http.createServer(app);

        // Kh·ªüi t·∫°o Socket.IO th√¥ng qua SocketManager
        socketManager.initialize(server);

        server.listen(PORT, () => {
            console.log('-----------------------------------------------------------------------');
            console.log(`[üöÄ Server] is running on port ${PORT}`);
        });

        // X·ª≠ l√Ω khi server ƒë√≥ng
        process.on('SIGTERM', () => {
            console.log('SIGTERM signal received: closing HTTP server');
            socketManager.close();
            server.close(() => {
                console.log('HTTP server closed');
            });
        });

    }
    catch (error) {
        console.error("[‚ùå Unable to start server:", error.message);
    }
};
console.log('-----------------------------------------------------------------------');

// Run server
startServer();

